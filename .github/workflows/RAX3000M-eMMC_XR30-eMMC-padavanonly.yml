#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
###############手动修改##############
name: RAX3000M-eMMC_XR30-eMMC-padavanonly

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      LAN_IP:
        description: '设置路由器IP地址'
        required: true
        default: '192.168.3.1'
      WIFI_DRIVER:
        description: '选择WiFi驱动'
        required: true
        default: 'v7.6.7.2-fw-20240823(recommend)'
        type: choice
        options:
        - v7.6.7.2-fw-20240823(recommend)
        - v7.6.6.1-fw-20230306(recommend)
        - v7.6.7.2-fw-default
        - v7.6.7.2-fw-20230306
        - v7.6.7.2-fw-20230330
        - v7.6.7.2-fw-20230411
        - v7.6.7.2-fw-20230717
        - v7.6.7.2-fw-20231024
        - v7.6.6.1-fw-default
        - v7.6.6.1-fw-20230330
        - v7.6.6.1-fw-20230411
        - v7.6.6.1-fw-20230717
        - v7.6.6.1-fw-20231024
        - v7.6.6.1-fw-20240823
      EEPROM:
        description: '使用nx30pro eeprom和固定WiFi MAC地址'
        required: true
        default: true
        type: boolean
      APP_MTK:
        description: '使用luci-app-mtk的wifi配置'
        required: true
        default: false
        type: boolean
      NO_DOCKERMAN:
        description: '不构建luci-app-dockerman?'
        required: true
        default: false
        type: boolean
      ssh:
        description: 'SSH连接到Actions?'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 16 * * *

env:
  ###############手动修改##############
  ##因为是两个设备，所以手动设置上传时候的打包名称和tag名称UPLOAD_TAG_NAME
  OPENWRT_NAME: hanwckf
  UPLOAD_TAG_NAME: rax3000m-emmc_xr30-emmc
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-23.05
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: RAX3000M-eMMC_XR30-eMMC-hanwckf/padavanonly-feeds.conf.default
  RAX3000M_EMMC_DTS_FILE: target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts
  CONFIG_FILE: RAX3000M-eMMC_XR30-eMMC-hanwckf/.mtwifi-cfg.config
  DIY_P1_SH: RAX3000M-eMMC_XR30-eMMC-hanwckf/diy-part1.sh
  DIY_P2_SH: RAX3000M-eMMC_XR30-eMMC-hanwckf/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 缓存下载包
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-downloads-${{ hashFiles('openwrt/feeds.conf.default', 'openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-downloads-

    - name: 缓存编译结果
      uses: actions/cache@v3
      with:
        path: openwrt/build_dir
        key: ${{ runner.os }}-build-${{ hashFiles('openwrt/feeds.conf.default', 'openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2204)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 清理磁盘空间(Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: false
        dotnet: false
        haskell: false
        large-packages: false
        swap-storage: false

    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载feeds.conf.default & DIY_P1_SH
      run: |
        if [ -e $FEEDS_CONF ]; then
            mv $FEEDS_CONF openwrt/feeds.conf.default
            echo "成功加载 $FEEDS_CONF 到 openwrt/feeds.conf.default"
        else
            echo "$FEEDS_CONF 不存在，跳过加载"
        fi
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 & 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: 加载config & DIY_P2_SH
      run: |
        if [ -e $CONFIG_FILE ]; then
            mv $CONFIG_FILE openwrt/.config
            echo "成功加载 $CONFIG_FILE 到 openwrt/.config"
        else
            echo "$CONFIG_FILE 不存在，跳过加载"
        fi
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 调用中间配置工作流
      uses: ./.github/workflows/intermediate_config.yml
      with:
        LAN_IP: ${{ github.event.inputs.LAN_IP }}
        WIFI_DRIVER: ${{ github.event.inputs.WIFI_DRIVER }}
        EEPROM: ${{ github.event.inputs.EEPROM }}
        APP_MTK: ${{ github.event.inputs.APP_MTK }}
        NO_DOCKERMAN: ${{ github.event.inputs.NO_DOCKERMAN }}
        ssh: ${{ github.event.inputs.ssh }}
        RAX3000M_EMMC_DTS_FILE: ${{ env.RAX3000M_EMMC_DTS_FILE }}

    - name: 下载安装包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        
        sed -n 's/.*lan) ipad=${ipaddr:-"\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)"} ;;.*/\1/p' package/base-files/files/bin/config_generate | head -n 1 > IP_ADDR
        [ -s IP_ADDR ] && echo "IP_ADDR=$(cat IP_ADDR)" >> $GITHUB_ENV
        if grep -q 'CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7661=y' .config; then
                echo "WIFI_VERSION=-v7661" >> $GITHUB_ENV
        else
                echo "WIFI_VERSION=-v7672" >> $GITHUB_ENV
        fi
        if [ ${{ github.event.inputs.EEPROM }} == 'true' ]; then
                echo "EEPROM=-eeprom" >> $GITHUB_ENV
        else
                echo "EEPROM=" >> $GITHUB_ENV
        fi
        if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' .config; then
                echo "WIFI_INTERFACE=-mtwifi" >> $GITHUB_ENV
        else
                echo "WIFI_INTERFACE=" >> $GITHUB_ENV
        fi
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' .config; then
                echo "BUILD_DOCKERMAN=-docker" >> $GITHUB_ENV
        else
                echo "BUILD_DOCKERMAN=" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT
      
      
    - name: 整理文件并重命名
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: | 
        mapfile -t devices < <(grep '^CONFIG_TARGET_DEVICE.*=y' openwrt/.config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        cd openwrt/bin/targets/*/*
        rm -rf packages
        error_occurred=false
        for val in "${devices[@]}"; do
          for file in *${val}*; do
            new_name="${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${val}${{ env.WIFI_VERSION }}${{ env.EEPROM }}${{ env.BUILD_DOCKERMAN }}${file#*$val}"
            mv "$file" "$new_name" || {
              echo "Error: Failed to rename file $file"
              error_occurred=true
            }
          done
          echo "$val"
        done
        if [ "$error_occurred" = true ]; then
          echo "status=failure" >> $GITHUB_OUTPUT
        else
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        fi

    - name: 打包上传固件到Actions Artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_VERSION }}${{ env.EEPROM }}${{ env.BUILD_DOCKERMAN }}
        path: ${{ env.FIRMWARE }}

    - name: 生成固件Release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        touch release.txt
        echo "- 使用源码：${{ env.REPO_URL }}" >> release.txt
        echo "- 使用分支：${{ env.REPO_BRANCH }}" >> release.txt
        echo "- 登录地址：${{ env.IP_ADDR }}" >> release.txt
        echo "- 使用WiFi驱动${{ github.event.inputs.WIFI_DRIVER }}" >> release.txt
        if [[ "${{ env.EEPROM }}" == '-eeprom' ]]; then
               echo "- 使用nx30pro高功率eeprom并固定WiFi MAC地址" >> release.txt
        else
               echo "- 未使用nx30pro高功率eeprom未固定WiFi MAC地址" >> release.txt
        fi
        if [[ "${{ env.WIFI_INTERFACE }}" == '-mtwifi' ]]; then
                echo "- 使用hanwckf mtwifi-cfg原生luci无线配置工具" >> release.txt
        else
                echo "- 使用mtk-sdk luci-app-mtk无线配置工具" >> release.txt
        fi
        if [[ "${{ env.BUILD_DOCKERMAN }}" == '-docker' ]]; then
                echo "- 已编译luci-app-dockerman" >> release.txt
        else
                echo "- 未编译luci-app-dockerman" >> release.txt
        fi
        echo "release_tag=${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_VERSION }}${{ env.EEPROM }}${{ env.BUILD_DOCKERMAN }}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布固件至Release
      uses: softprops/action-gh-release@v2.1.0
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_VERSION }}${{ env.EEPROM }}${{ env.BUILD_DOCKERMAN }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
